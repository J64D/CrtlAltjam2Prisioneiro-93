//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PastaDaNicoleNaoMexer/MoveControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MoveControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MoveControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MoveControls"",
    ""maps"": [
        {
            ""name"": ""MoveMap"",
            ""id"": ""550d35e6-c398-4cee-93f4-e1451c1a5758"",
            ""actions"": [
                {
                    ""name"": ""MoveAction"",
                    ""type"": ""Value"",
                    ""id"": ""177c8e85-6ed5-4f5c-beb7-95ca8d8d3786"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""aa0f8430-9d74-4aad-b985-68243ac251ea"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2d13b073-a5fb-4e57-8e28-40fcfb56a1bd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9a59c121-16da-498a-ac68-dc43492ba7d4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""925885e0-4d26-4af4-87c0-a9eef0709dd3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3b3fb2f4-5045-452a-930c-b46740912c45"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MoveMap
        m_MoveMap = asset.FindActionMap("MoveMap", throwIfNotFound: true);
        m_MoveMap_MoveAction = m_MoveMap.FindAction("MoveAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MoveMap
    private readonly InputActionMap m_MoveMap;
    private IMoveMapActions m_MoveMapActionsCallbackInterface;
    private readonly InputAction m_MoveMap_MoveAction;
    public struct MoveMapActions
    {
        private @MoveControls m_Wrapper;
        public MoveMapActions(@MoveControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveAction => m_Wrapper.m_MoveMap_MoveAction;
        public InputActionMap Get() { return m_Wrapper.m_MoveMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveMapActions set) { return set.Get(); }
        public void SetCallbacks(IMoveMapActions instance)
        {
            if (m_Wrapper.m_MoveMapActionsCallbackInterface != null)
            {
                @MoveAction.started -= m_Wrapper.m_MoveMapActionsCallbackInterface.OnMoveAction;
                @MoveAction.performed -= m_Wrapper.m_MoveMapActionsCallbackInterface.OnMoveAction;
                @MoveAction.canceled -= m_Wrapper.m_MoveMapActionsCallbackInterface.OnMoveAction;
            }
            m_Wrapper.m_MoveMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveAction.started += instance.OnMoveAction;
                @MoveAction.performed += instance.OnMoveAction;
                @MoveAction.canceled += instance.OnMoveAction;
            }
        }
    }
    public MoveMapActions @MoveMap => new MoveMapActions(this);
    public interface IMoveMapActions
    {
        void OnMoveAction(InputAction.CallbackContext context);
    }
}
