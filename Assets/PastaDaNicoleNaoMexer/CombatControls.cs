//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PastaDaNicoleNaoMexer/CombatControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CombatControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CombatControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CombatControls"",
    ""maps"": [
        {
            ""name"": ""CombatMap"",
            ""id"": ""338231ac-a0a2-4f30-8dda-078e1d473f8f"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""fdbc495b-06ba-4ae7-9ba4-5c161886be46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""9149b486-3181-4e74-900a-9be0df7299f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9748c15e-c155-4ca7-91bb-990662c1fcd9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed05d608-37d9-4d1c-88d6-2f49b7b9db7c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""363d2da1-62c0-4dba-9767-c6b6882d62cd"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CombatMap
        m_CombatMap = asset.FindActionMap("CombatMap", throwIfNotFound: true);
        m_CombatMap_Attack = m_CombatMap.FindAction("Attack", throwIfNotFound: true);
        m_CombatMap_Interact = m_CombatMap.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CombatMap
    private readonly InputActionMap m_CombatMap;
    private ICombatMapActions m_CombatMapActionsCallbackInterface;
    private readonly InputAction m_CombatMap_Attack;
    private readonly InputAction m_CombatMap_Interact;
    public struct CombatMapActions
    {
        private @CombatControls m_Wrapper;
        public CombatMapActions(@CombatControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_CombatMap_Attack;
        public InputAction @Interact => m_Wrapper.m_CombatMap_Interact;
        public InputActionMap Get() { return m_Wrapper.m_CombatMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatMapActions set) { return set.Get(); }
        public void SetCallbacks(ICombatMapActions instance)
        {
            if (m_Wrapper.m_CombatMapActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_CombatMapActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_CombatMapActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_CombatMapActionsCallbackInterface.OnAttack;
                @Interact.started -= m_Wrapper.m_CombatMapActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_CombatMapActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_CombatMapActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_CombatMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public CombatMapActions @CombatMap => new CombatMapActions(this);
    public interface ICombatMapActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
